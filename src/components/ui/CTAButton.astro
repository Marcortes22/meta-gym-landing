---
import type { CTAButtonProps } from '../../types';
import { DESIGN_TOKENS } from '../../constants';

export interface Props extends CTAButtonProps {}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  className = '', 
  ariaLabel,
  target = '_self',
  disabled = false,
  loading = false,
  onClick
} = Astro.props;

// Configuración simplificada usando clases CSS
const variantStyles = {
  primary: 'btn-primary',
  secondary: 'btn-secondary', 
  outline: 'btn-outline',
  ghost: 'btn-ghost',
  destructive: 'btn-destructive'
};

// Configuración de tamaños consistentes
const sizeStyles = {
  xs: 'btn-xs',
  sm: 'btn-sm', 
  md: 'btn-md',
  lg: 'btn-lg',
  xl: 'btn-xl'
};

// Construcción de clases CSS
const buttonClasses = [
  'btn', // Clase base
  variantStyles[variant],
  sizeStyles[size],
  loading ? 'cursor-wait' : '',
  className
].filter(Boolean).join(' ');
---

{href ? (
  <a
    class={buttonClasses}
    href={href}
    target={target}
    rel={target === '_blank' ? 'noopener noreferrer' : undefined}
    aria-label={ariaLabel}
  >
    {loading && (
      <svg 
        class="animate-spin -ml-1 mr-2 h-4 w-4" 
        xmlns="http://www.w3.org/2000/svg" 
        fill="none" 
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    )}
    <slot />
  </a>
) : (
  <button
    class={buttonClasses}
    type="button"
    disabled={disabled || loading}
    aria-label={ariaLabel}
  >
    {loading && (
      <svg 
        class="animate-spin -ml-1 mr-2 h-4 w-4" 
        xmlns="http://www.w3.org/2000/svg" 
        fill="none" 
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    )}
    <slot />
  </button>
)}

<style>
  /* Animaciones mejoradas para botones primarios */
  button:hover, a:hover {
    transform: translateY(-1px);
  }
  
  button:active, a:active {
    transform: translateY(0);
  }
  
  /* Efecto de brillo en hover para variant primary */
  button::before, a::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }
  
  button:hover::before, a:hover::before {
    left: 100%;
  }
  
  /* Estados de loading */
  button:disabled {
    cursor: not-allowed;
  }
  
  /* Animación de spin para el loading */
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>